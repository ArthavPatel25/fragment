name: ci

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  lint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          HURL_SKIP_INSTALL: 1

      - name: Run ESLint
        run: npm run lint

  dockerfile-lint:
    name: Dockerfile Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        env:
          HURL_SKIP_INSTALL: 1

      - name: Run Unit Tests
        run: npm test

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install node dependencies
        run: npm install

      - name: Set environment variables for docker-compose
        run: |
          echo "AWS_S3_BUCKET_NAME=fragments" >> $GITHUB_ENV
          echo "AWS_DYNAMODB_TABLE_NAME=fragments" >> $GITHUB_ENV
          echo "LOG_LEVEL=debug" >> $GITHUB_ENV

      - name: Build Containers
        run: docker compose up -d --force-recreate

      - name: Wait for all services to be healthy
        run: |
          echo "Waiting for all services to be ready..."
          sleep 10
          docker ps
          echo "Checking service health..."
          curl -f http://localhost:8080/ || echo "Fragment service not ready"
          curl -f http://localhost:4566/_localstack/health || echo "LocalStack not ready"
          curl -f http://localhost:8000/ || echo "DynamoDB not ready"

      - name: Wait for LocalStack to be ready
        shell: bash
        run: |
          echo "waiting for LocalStack..."
          for i in {1..90}; do
            if curl -s http://localhost:4566/_localstack/health | grep -E '"s3": "(running|available)"'; then
              echo "LocalStack is ready"
              exit 0
            fi
            sleep 2
          done
          echo "LocalStack failed to start in time"
          curl -s http://localhost:4566/_localstack/health || true
          docker ps || true
          docker logs $(docker ps -qf "name=localstack") || true
          exit 1

      - name: Setup Local AWS Resources
        run: |
          chmod +x ./scripts/local-aws-setup.sh
          ./scripts/local-aws-setup.sh

      - name: Debug - Check container logs and connectivity
        run: |
          echo "=== Fragment Application Logs ==="
          docker logs fragment-fragments-1 2>&1 | tail -50
          echo "=== Testing connectivity from fragment container ==="
          docker exec fragment-fragments-1 sh -c "curl -s http://localstack:4566/_localstack/health || echo 'Cannot reach LocalStack from container'"
          docker exec fragment-fragments-1 sh -c "curl -s http://dynamodb-local:8000/ || echo 'Cannot reach DynamoDB from container'" 
          echo "=== Environment variables in fragment container ==="
          docker exec fragment-fragments-1 env | grep -E "(AWS|LOG|NODE|PORT)" | sort
          echo "=== Testing a simple POST request ==="
          curl -X POST http://localhost:8080/v1/fragments \
            -H "Content-Type: text/plain" \
            -H "Authorization: Basic dXNlcjFAZW1haWwuY29tOnBhc3N3b3JkMQ==" \
            -d "test fragment" -v || true

      - name: Run Hurl Tests
        run: npm run test:integration

  docker-hub:
    name: Build and Push to Docker Hub
    needs: [lint, dockerfile-lint, unit-tests, integration-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        env:
          DOCKERHUB_REPO: arthavpatel2511/fragments
          SHA_TAG: sha-${{ github.sha }}
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          tags: ${{ env.DOCKERHUB_REPO }}:${{ env.SHA_TAG }}, ${{ env.DOCKERHUB_REPO }}:main, ${{ env.DOCKERHUB_REPO }}:latest