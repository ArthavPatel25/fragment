# Continuous Delivery Workflow
#
# This should happen whenever we push a new tag, and we tag an existing
# commit after we know it's good (e.g., has been tested).
#
# To create a new tag, we also need to update the package.json version:
#
# $ npm version 0.5.0
#
# This will update version in package.json to 0.5.0 and create a new
# tag, v0.5.0 in git. We'll then use this tag (i.e., v0.5.0) to tag
# our docker image before we push to AWS.
name: cd

on:
  push:
    # Whenever a new tag is pushed
    tags:
      # Any tag starting with v... should trigger this workflow.
      - 'v**'

jobs:
  # NOTE: this assumes our CI jobs have already passed previously
  # (i.e., that we don't tag a commit manually until we know a build is working)
  aws:
    name: AWS
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        # Use buildx, which is faster and can optimize the build steps
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials using Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # Use our GitHub Encrypted Secrets via secrets.*
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          # Hard-code our region, which isn't a secret, and won't change
          aws-region: us-east-1

      # Login to our ECR repository using the configured credentials
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push to Amazon ECR
        env:
          # Get ECR registry URL from previous step
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # Name of your ECR repository
          ECR_REPO: fragments
          # Use the tag version (e.g., v0.1.0) and also tag it as latest
          VERSION_TAG: ${{ github.ref_name }}
        uses: docker/build-push-action@v6
        with:
          context: . 
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}, ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: fragments-definition.json 
          container-name: fragments-container 
          image: ${{ steps.login-ecr.outputs.registry }}/fragments:${{ github.ref_name }} 
          environment-variables: |
            LOG_LEVEL=info
            NODE_ENV=production
            AWS_REGION=us-east-1
            AWS_S3_BUCKET_NAME=arthav-fragments 
          
            AWS_COGNITO_USER_POOL_ID=${{ secrets.AWS_COGNITO_USER_POOL_ID }}
            AWS_COGNITO_CLIENT_ID=${{ secrets.AWS_COGNITO_CLIENT_ID }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: fragments-service-1
          cluster: fragment-cluster
          wait-for-service-stability: true